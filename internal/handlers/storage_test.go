/*
 * This file was last modified at 2024-07-08 13:46 by Victor N. Skurikhin.
 * storage_test.go
 * $Id$
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package handlers

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	dto "github.com/vskurikhin/gometrics/internal/dto"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorage) Get(name string) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), name)
}

// GetCounter mocks base method.
func (m *MockStorage) GetCounter(name string) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockStorageMockRecorder) GetCounter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockStorage)(nil).GetCounter), name)
}

// GetGauge mocks base method.
func (m *MockStorage) GetGauge(name string) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockStorageMockRecorder) GetGauge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockStorage)(nil).GetGauge), name)
}

// Put mocks base method.
func (m *MockStorage) Put(name string, value *string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", name, value)
}

// Put indicates an expected call of Put.
func (mr *MockStorageMockRecorder) Put(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorage)(nil).Put), name, value)
}

// PutCounter mocks base method.
func (m *MockStorage) PutCounter(name string, value *string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutCounter", name, value)
}

// PutCounter indicates an expected call of PutCounter.
func (mr *MockStorageMockRecorder) PutCounter(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCounter", reflect.TypeOf((*MockStorage)(nil).PutCounter), name, value)
}

// PutGauge mocks base method.
func (m *MockStorage) PutGauge(name string, value *string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutGauge", name, value)
}

// PutGauge indicates an expected call of PutGauge.
func (mr *MockStorageMockRecorder) PutGauge(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGauge", reflect.TypeOf((*MockStorage)(nil).PutGauge), name, value)
}

// PutSlice mocks base method.
func (m *MockStorage) PutSlice(metrics dto.Metrics) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutSlice", metrics)
}

// PutSlice indicates an expected call of PutSlice.
func (mr *MockStorageMockRecorder) PutSlice(metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSlice", reflect.TypeOf((*MockStorage)(nil).PutSlice), metrics)
}

// ReadFromFile mocks base method.
func (m *MockStorage) ReadFromFile(fileName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadFromFile", fileName)
}

// ReadFromFile indicates an expected call of ReadFromFile.
func (mr *MockStorageMockRecorder) ReadFromFile(fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromFile", reflect.TypeOf((*MockStorage)(nil).ReadFromFile), fileName)
}

// SaveToFile mocks base method.
func (m *MockStorage) SaveToFile(fileName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveToFile", fileName)
}

// SaveToFile indicates an expected call of SaveToFile.
func (mr *MockStorageMockRecorder) SaveToFile(fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToFile", reflect.TypeOf((*MockStorage)(nil).SaveToFile), fileName)
}
