/*
 * This file was last modified at 2024-07-08 13:46 by Victor N. Skurikhin.
 * metrics_service_grpc.pb.go
 * $Id$
 */

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: proto/metrics_service.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MetricsService_Update_FullMethodName  = "/proto.MetricsService/Update"
	MetricsService_Updates_FullMethodName = "/proto.MetricsService/Updates"
	MetricsService_Value_FullMethodName   = "/proto.MetricsService/Value"
)

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsServiceClient interface {
	Update(ctx context.Context, in *MetricUpdateRequest, opts ...grpc.CallOption) (*MetricUpdateResponse, error)
	Updates(ctx context.Context, in *MetricsUpdateRequest, opts ...grpc.CallOption) (*MetricsUpdateResponse, error)
	Value(ctx context.Context, in *MetricValueRequest, opts ...grpc.CallOption) (*MetricValueResponse, error)
}

type metricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServiceClient(cc grpc.ClientConnInterface) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) Update(ctx context.Context, in *MetricUpdateRequest, opts ...grpc.CallOption) (*MetricUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricUpdateResponse)
	err := c.cc.Invoke(ctx, MetricsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) Updates(ctx context.Context, in *MetricsUpdateRequest, opts ...grpc.CallOption) (*MetricsUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsUpdateResponse)
	err := c.cc.Invoke(ctx, MetricsService_Updates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) Value(ctx context.Context, in *MetricValueRequest, opts ...grpc.CallOption) (*MetricValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricValueResponse)
	err := c.cc.Invoke(ctx, MetricsService_Value_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServiceServer is the server API for MetricsService service.
// All implementations must embed UnimplementedMetricsServiceServer
// for forward compatibility
type MetricsServiceServer interface {
	Update(context.Context, *MetricUpdateRequest) (*MetricUpdateResponse, error)
	Updates(context.Context, *MetricsUpdateRequest) (*MetricsUpdateResponse, error)
	Value(context.Context, *MetricValueRequest) (*MetricValueResponse, error)
	mustEmbedUnimplementedMetricsServiceServer()
}

// UnimplementedMetricsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServiceServer struct {
}

func (UnimplementedMetricsServiceServer) Update(context.Context, *MetricUpdateRequest) (*MetricUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMetricsServiceServer) Updates(context.Context, *MetricsUpdateRequest) (*MetricsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updates not implemented")
}
func (UnimplementedMetricsServiceServer) Value(context.Context, *MetricValueRequest) (*MetricValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Value not implemented")
}
func (UnimplementedMetricsServiceServer) mustEmbedUnimplementedMetricsServiceServer() {}

// UnsafeMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServiceServer will
// result in compilation errors.
type UnsafeMetricsServiceServer interface {
	mustEmbedUnimplementedMetricsServiceServer()
}

func RegisterMetricsServiceServer(s grpc.ServiceRegistrar, srv MetricsServiceServer) {
	s.RegisterService(&MetricsService_ServiceDesc, srv)
}

func _MetricsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).Update(ctx, req.(*MetricUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_Updates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).Updates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_Updates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).Updates(ctx, req.(*MetricsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_Value_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).Value(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_Value_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).Value(ctx, req.(*MetricValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsService_ServiceDesc is the grpc.ServiceDesc for MetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _MetricsService_Update_Handler,
		},
		{
			MethodName: "Updates",
			Handler:    _MetricsService_Updates_Handler,
		},
		{
			MethodName: "Value",
			Handler:    _MetricsService_Value_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/metrics_service.proto",
}
